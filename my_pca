% We perform PCA and neirest neighbour classifier on the Semeion Handwritten Digital Data Set

function [error_rate, errors] = my_pca(data, dim)
tic
if nargin < 2
    dim = 256;
end    
    [trainingset, testingset] = create_set(data);
    output_training = trainingset(:, 257);
    output_testing = testingset(:, 257);
    set = [trainingset(:, 1:end-1)' testingset(:, 1:end-1)'];
    input = set';    
    [m,n] = size(input);

    % find the mean
    my_mean = mean(input);

    % substract the mean
    for i = 1:n
        input(:,i) = input(:,i) - my_mean(i);
    end

    % find the covariance
    covariance = (1/m) * input' * input;

    % blah blah blah, do the PCA
    [U,S,V] = svd(covariance);
    
    
    % calculate the distance from each of the testingset data to each of
    % the trainingset data
    error_rate = zeros(dim,1);
    errors = zeros(dim,1);
    for dimensions = 1:dim
        Ureduce = U(:,1:dimensions);
        z = Ureduce' * input';
        z_training = z(:, 1:100);
        z_testing = z(:, 101:end);
        [m,n] = size(z_testing);
        [d,f] = size(z_training);
        distance = zeros(f,1);
        our_output = zeros(n,1);
        for i = 1:n
            for j = 1:f
                for k = 1:dimensions
                    distance(j) = distance(j) + (z_testing(k,i) - z_training(k,j)) ^ 2;
                end
                distance(j) = sqrt(distance(j));
            end 

            % look for the point when the distance is the smallest and decide
            % that the testing point is the same as it
            mat = [distance output_training];
            mat = sortrows(mat,1);
            voting = mat(:,2);  
            voting = voting(mode(1));
            our_output(i,1) = voting;
        end    

        % look how many points have been classified correctly
        class_correct = 0;
        for i = 1:n
            if output_testing(i) == our_output(i);
                class_correct = class_correct + 1;
            end
        end

        % find the error rate
        error_rate(dimensions) = 1 - (class_correct/n);
        errors(dimensions) = 1493 - class_correct;
   end    
toc    
end    

% a function which reads the data and makes the input on a suitable format
function [trainingset, testingset, input, output] = create_set(data)
    
    % load the data
    input_weird = load(data, '-ascii');
    
    % shuffle the set
    input_weird = input_weird(randperm(size(input_weird,1)),:);

    % remove the last 10 values in order to extract the input
    input = input_weird(:, [1:256]);
    [m,n] = size(input);

    % extract the output on the format [0:9]
    output_weird = input_weird(:, [257:266]);
    output = zeros(m,1);

    for i = 1:m
        for j = 1:10
            if output_weird(i,j) == 1
                output(i) = j-1;
            end
        end
    end  
    
    % recreate the set which consists of both input and output
    set = [input output];
    
    % divide the set on 10 subsets, each one for output = k (where k =
    % 0,1,2,3,4,5,6,7,8,9
    for i = 1:10
        subset_length(i) = 0;
    end       
    
    subset1 = zeros(257,0);     
    subset2 = zeros(257,0);
    subset3 = zeros(257,0);
    subset4 = zeros(257,0);
    subset5 = zeros(257,0);
    subset6 = zeros(257,0);
    subset7 = zeros(257,0);
    subset8 = zeros(257,0);
    subset9 = zeros(257,0);
    subset10 = zeros(257,0);
 
    for i = 1:m
        if output(i) == 0
            subset1 = [subset1 set(i,:)'];
        elseif output(i) == 1
            subset2 = [subset2 set(i,:)'];
        elseif output(i) == 2
            subset3 = [subset3 set(i,:)'];
        elseif output(i) == 3
            subset4 = [subset4 set(i,:)'];
        elseif output(i) == 4
            subset5 = [subset5 set(i,:)'];
        elseif output(i) == 5
            subset6 = [subset6 set(i,:)'];
        elseif output(i) == 6
            subset7 = [subset7 set(i,:)'];
        elseif output(i) == 7
            subset8 = [subset8 set(i,:)'];
        elseif output(i) == 8
            subset9 = [subset9 set(i,:)'];
        else
            subset10 = [subset10 set(i,:)'];     
        end    
    end
    
    subset1 = subset1';
    subset2 = subset2';
    subset3 = subset3';
    subset4 = subset4';
    subset5 = subset5';
    subset6 = subset6';
    subset7 = subset7';
    subset8 = subset8';
    subset9 = subset9';
    subset10 = subset10';
      
    % divide the subsets on trainingset and testingset
    trainingset1 = subset1([1:10], :);
    testingset1 = subset1([11:end], :);
    trainingset2 = subset2([1:10], :);
    testingset2 = subset2([11:end], :);
    trainingset3 = subset3([1:10], :);
    testingset3 = subset3([11:end], :);
    trainingset4 = subset4([1:10], :);
    testingset4 = subset4([11:end], :);
    trainingset5 = subset5([1:10], :);
    testingset5 = subset5([11:end], :);
    trainingset6 = subset6([1:10], :);
    testingset6 = subset6([11:end], :);
    trainingset7 = subset7([1:10], :);
    testingset7 = subset7([11:end], :);
    trainingset8 = subset8([1:10], :);
    testingset8 = subset8([11:end], :);
    trainingset9 = subset9([1:10], :);
    testingset9 = subset9([11:end], :);
    trainingset10 = subset10([1:10], :);
    testingset10 = subset10([11:end], :);
    
    trainingset = [trainingset1' trainingset2' trainingset3' trainingset4' trainingset5' trainingset6' trainingset7' trainingset8' trainingset9' trainingset10'];
    testingset = [testingset1' testingset2' testingset3' testingset4' testingset5' testingset6' testingset7' testingset8' testingset9' testingset10'];
    
    trainingset = trainingset';
    testingset = testingset';
end


% a small function to find the norm of rows
function norms = normrows (M)
    if size(M,2) == 1,
        norms = abs(M);
    else
        norms = sqrt(sum((M.^2)')');
end
