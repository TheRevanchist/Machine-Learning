% A function which performs Naive Bayes on the Iris Data Set

function result = naive_Bayes(mean1, mean2, mean3, variance1, variance2, variance3, alpha1, alpha2, alpha3, input)

    input = input(:, [1:4]);
    l = length(input);
    
    % Find probabilities p(x|y = k) when k = 1, 2, 3
    prob_X_given_Y_1 = zeros(l,1);
    for i = 1:l
        prob_X_given_Y_1(i) = exp(-0.5 * (input(i,:) - mean1) * (input(i,:) - mean1)' / (variance1 * variance1')) / sqrt(2 * pi * (variance1 * variance1'));
    end
    
    prob_X_given_Y_2 = zeros(l,1);
    for i = 1:l
        prob_X_given_Y_2(i) = exp(-0.5 * (input(i,:) - mean2) * (input(i,:) - mean2)' / (variance2 * variance2')) / sqrt(2 * pi * (variance2 * variance2'));
    end
     
    prob_X_given_Y_3 = zeros(l,1);
    for i = 1:l
        prob_X_given_Y_3(i) = exp(-0.5 * (input(i,:) - mean3) * (input(i,:) - mean3)' / (variance3 * variance3')) / sqrt(2 * pi * (variance3 * variance3'));
    end
    
    % find probabilities p(y|x)
    prob1 = prob_X_given_Y_1 * alpha1;
    prob2 = prob_X_given_Y_2 * alpha2;
    prob3 = prob_X_given_Y_3 * alpha3;
    
    models = [prob1 prob2 prob3];
    result = zeros(l,1);
    models = models';
    maximum = max(models);
    
    % decide which model should be used for each of the x's
    for i = 1:l
        if maximum(i) == prob1(i)
            result(i) = 1;
        elseif maximum(i) == prob2(i)
            result(i) = 2;
        else
            result(i) = 3;
        end
    end     
end

% we find the parameters to fit the model
function [mean1, mean2, mean3, variance1, variance2, variance3, alpha1, alpha2, alpha3] = find_parameters_Bayes(input)

    l = length(input);
    % create the subsets
    subset1 = [0 0 0 0 0]';
    subset2 = [0 0 0 0 0]';
    subset3 = [0 0 0 0 0]';
    
    for i = 1:l
        if input(i,5) == 1
            subset1 = [subset1 input(i,:)'];
        elseif input(i,5) == 2
            subset2 = [subset2 input(i,:)'];
        else
            subset3 = [subset3 input(i,:)'];
        end    
    end   
    l1 = length(subset1');
    l2 = length(subset2');
    l3 = length(subset3');
    
    subset1 = subset1([1:4], [2:l1])';
    subset2 = subset2([1:4], [2:l2])';
    subset3 = subset3([1:4], [2:l3])';
    
    % calculate means
    mean1 = mean(subset1);
    mean2 = mean(subset2);
    mean3 = mean(subset3);
    
    % calculate variances
    variance1 = var(subset1);
    variance2 = var(subset2);
    variance3 = var(subset3);
    
    % calculate frequency
    alpha1 = l1/l;
    alpha2 = l2/l;
    alpha3 = l3/l;
end

% the function which reads the file and makes input on a suitable format
function a = goodfile(filename)

   [sepal_length, sepal_width, petal_length, petal_width, class] = textread(filename, '%f %f %f %f %s', 'delimiter', ','); 
   
   class_number = zeros(length(class),1);
   
   name_class = 'Iris-setosa';
   
   for i = 1:length(class)
       index = strcmp(class(i), name_class);
       if index == 1
           class_number(i) = 1;
       end
   end
   
   name_class2 = 'Iris-versicolor';
   
   for i = 1:length(class)
       index = strcmp(class(i), name_class2);
       if index == 1
           class_number(i) = 2;
       end
   end
   
   name_class3 = 'Iris-virginica';
   
   for i = 1:length(class)
       index = strcmp(class(i), name_class3);
       if index == 1
           class_number(i) = 3;
       end
   end
   
   
   a = [sepal_length, sepal_width, petal_length, petal_width, class_number];
end   
   
